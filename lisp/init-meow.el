;;; init-meow --- summary
;;; Commentary:
;;; Code:
(require-package 'meow)

(defun meow-setup ()
  (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
  (meow-motion-overwrite-define-key
   '("j" . meow-next)
   '("k" . meow-prev)
   '("<escape>" . ignore))
  (meow-leader-define-key
   ;; SPC j/k will run the original command in MOTION state.
   '("j" . "H-j")
   '("k" . "H-k")
   ;; Use SPC (0-9) for digit arguments.
   '("1" . meow-digit-argument)
   '("2" . meow-digit-argument)
   '("3" . meow-digit-argument)
   '("4" . meow-digit-argument)
   '("5" . meow-digit-argument)
   '("6" . meow-digit-argument)
   '("7" . meow-digit-argument)
   '("8" . meow-digit-argument)
   '("9" . meow-digit-argument)
   '("0" . meow-digit-argument)
   '("/" . meow-keypad-describe-key)
   '("?" . meow-cheatsheet))
  (meow-normal-define-key
   '("0" . meow-expand-0)
   '("9" . meow-expand-9)
   '("8" . meow-expand-8)
   '("7" . meow-expand-7)
   '("6" . meow-expand-6)
   '("5" . meow-expand-5)
   '("4" . meow-expand-4)
   '("3" . meow-expand-3)
   '("2" . meow-expand-2)
   '("1" . meow-expand-1)
   '("-" . negative-argument)
   '(";" . meow-reverse)
   '("," . meow-inner-of-thing)
   '("." . meow-bounds-of-thing)
   '("[" . meow-beginning-of-thing)
   '("]" . meow-end-of-thing)
   '("a" . meow-append)
   '("A" . meow-open-below)
   '("b" . meow-back-word)
   '("B" . meow-back-symbol)
   '("c" . meow-change)
   '("d" . meow-delete)
   '("D" . meow-backward-delete)
   '("e" . meow-next-word)
   '("E" . meow-next-symbol)
   '("f" . meow-find)
   '("g" . meow-cancel-selection)
   '("G" . meow-grab)
   '("h" . meow-left)
   '("H" . meow-left-expand)
   '("i" . meow-insert)
   '("I" . meow-open-above)
   '("j" . meow-next)
   '("J" . meow-next-expand)
   '("k" . meow-prev)
   '("K" . meow-prev-expand)
   '("l" . meow-right)
   '("L" . meow-right-expand)
   '("m" . meow-join)
   '("n" . meow-search)
   '("o" . meow-block)
   '("O" . meow-to-block)
   '("p" . meow-yank)
   '("q" . meow-quit)
   '("Q" . meow-goto-line)
   '("r" . meow-replace)
   '("R" . meow-swap-grab)
   '("s" . meow-kill)
   '("t" . meow-till)
   '("u" . meow-undo)
   '("U" . meow-undo-in-selection)
   '("v" . meow-visit)
   '("w" . meow-mark-word)
   '("W" . meow-mark-symbol)
   '("x" . meow-line)
   '("X" . meow-goto-line)
   '("y" . meow-save)
   '("Y" . meow-sync-grab)
   '("z" . meow-pop-selection)
   '("'" . repeat)
   '("<escape>" . ignore)))

;; (global-set-key (kbd "C-x C-b") 'switch-to-buffer)
;; (global-set-key (kbd "C-x b") 'ibuffer)
;; (global-set-key (kbd "C-x o") 'delete-blank-lines)
;; (global-set-key (kbd "C-x C-o") 'other-window)

(require 'meow)
(meow-setup)
(meow-global-mode 1)

(defvar my-map
  (let ((map (make-sparse-keymap)))
    (define-key map (kbd "ci") 'evilnc-comment-or-uncomment-lines)
    (define-key map (kbd "cc") 'evilnc-copy-and-comment-lines)
    (define-key map (kbd "xb") 'switch-to-buffer)
    (define-key map (kbd "xo") 'other-window)
    (define-key map (kbd "co") 'compile)
    (define-key map (kbd "cg") 'consult-ripgrep)
    (define-key map (kbd "cl") 'consult-line)
    (define-key map (kbd "cr") 'consult-recent-file)
    (define-key map (kbd "lc") 'lsp-find-declaration)
    (define-key map (kbd "lf") 'lsp-find-definition)
    (define-key map (kbd "lo") 'lsp-clangd-find-other-file)
    (define-key map (kbd "lr") 'lsp-workspace-restart)
    (define-key map (kbd "ld") 'lsp-workspace-shutdown)
    (define-key map (kbd "la") 'lsp-execute-code-action)
    (define-key map (kbd "ln") 'lsp-rename)
    (define-key map (kbd "lg") 'lsp-ui-doc-glance)
    (define-key map (kbd "ls") 'consult-lsp-symbols)
    (define-key map (kbd "li") 'consult-lsp-diagnostics)
    (define-key map (kbd "<SPC>") 'meow-keypad)
    (define-key map (kbd "gg") 'git-gutter)
    map)
  "My key map.")

;; Use SPC as my-map
;; (meow-define-keys
;;     'normal
;;   (cons "SPC" my-map)
;;   )

;; Or use SPC as keypad
(meow-leader-define-key
 (cons "SPC" my-map))

(provide 'init-meow)
;;; init-meow.el ends here
