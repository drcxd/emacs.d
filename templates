fundamental-mode

(today (format-time-string "%Y-%m-%d"))

text-mode

(godel "GÃ¶del")

typst-ts-mode

(title "#align(center, text(17pt)[*" (p "title") "*])" q)
(idi "bb(1)")
(thm-pre "#import \"@preview/ctheorems:1.1.3\": *\n"
         "#show: thmrules.with(qed-symbol: $square$)")

(thm "#let " (p "command") " = " (r "thmtype") "(\"" (p "identifier") "\", \"" (p "head") "\"" p ")" q)

latex-mode org-mode

(ilm "\\(" p "\\)" q)
(olm "\\[" p "\\]" q)
(align "\\begin{align}\n" r> n> "\\end{align}")
(alignn "\\begin{align*}\n" r> n> "\\end{align*}")
(cases "\\begin{cases}\n" r> n> "\\end{cases}")
(equation "\\begin{equation}" r> n> "\\end{equation}")
(equationn "\\begin{equation*}" r> n> "\\end{equation*}")
(dndr "\\begin{DndReadAloud}" r> n> "\\end{DndReadAloud}")
(ch "\\begin{chinese}" r> n> "\\end{chinese}")
(powerset "\\mathcal{P}(" p ")" q)
(set "\\{" p "\\}" q)
(idi "\\mathbb{1}") ;; this requires LaTeX package unicode-math
(ide "\\mathrm{id}")
(implies "\\Longrightarrow")
(iff "\\Longleftrightarrow")
(ns "\\mathbb{N}")
(qs "\\mathbb{Q}")
(rs "\\mathbb{R}")
(cs "\\mathbb{C}")
(cal "\\mathcal{" p "}" q)
(bb "\\mathbb{" p "}" q)
(nt "\\newtheorem{" (p "set") "}{" (p "name") "}" q)
(nt* "\\newtheorem*{" (p "set") "}{" (p "name") "}" q)

org-mode

(tt "#+title: ")
(lh "#+latex_header: ")
(lhup "#+latex_header: \\usepackage{" (p "package name") "}" q)

(typm "#[$" p "$#]" q)

prog-mode

(fixme (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "FIXME: ")
(todo (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "TODO: ")
(bug (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "BUG: ")
(hack (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "HACK: ")
(note (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "NOTE: ")
(dep (if (derived-mode-p 'emacs-lisp-mode) ";; " comment-start) "DEPRECATED: ")

emacs-lisp-mode

(el ";;; " (p "module-name" mname) " --- summary" n
    ";;; Commentary:" n
    ";;; Code:" n
    q n
    "(provide '" (s mname) ")" n
    ";;; " (s mname) ".el ends here" n)

c-mode c++-mode

(main "int main(int argc, char* argv[]) {" n
      q n
      "return 0;" n
      "}" n)

(i "#include " q)

c++-mode

(class "class " (p "ClassName&InheritanceList") n
       "{" n>
       q n
       "};" n>)

;;; Unreal Engine Templates
(UC "UCLASS(" p ")" q)
(UP "UPROPERTY(" p ")" q)
(UF "UFUNCTION(" p ")" q)
(US "USTRUCT(" p ")" q)
(UE "UENUM(" p ")" q)
(UI "UINTERFACE(" p ")" q)
(GE "GENERATED_BODY()")
(brw "BlueprintReadWrite")
(bro "BlueprintReadOnly")
(ba "BlueprintAssignable")
(bc "BlueprintCallable")
(bt "BlueprintType")
(cat "Category = \"" p "\"" q)
(dp "DisplayName = \"" p "\"" q)
(ea "EditAnywhere")
(ec "EditCondition = \"" p "\"" q)
(mt "meta = (" p ")" q)
(ts "Transient")
(wptr "TWeakObjectPtr<" (r "type") ">" q)
(ulogt "UE_LOG(LogTemp, Display, TEXT(\"DEBUG CXD " p "\")" q ");")
(ulog "UE_LOG(" (p "category") ", " (p "verbosity") ", TEXT(\"" p "\")" p ");" q)
(umsg "GEngine->AddOnScreenDebugMessage(INDEX_NONE, 4.0F, FColor::Cyan, FString::Printf(TEXT(\"" p "\")" q "));")

(cc "FAutoConsoleCommand " (p "var") "(" n
    "TEXT(\"" (p "name") "\")," n
    "TEXT(\"" (p "help") "\")," n
    "FConsoleCommandWithArgsDelegate::CreateLambda([](const TArray<FString>& Args){})," n
    (p "ECVF_Cheat") n
    ");" q )
;; Local Variables:
;; mode: lisp-data
;; End:
